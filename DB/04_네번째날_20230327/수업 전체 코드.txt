CREATE TABLE SBSCOMPANY
(
SABEON VARCHAR2(5) PRIMARY KEY,
AGE INT,
BIRTHDAY DATE DEFAULT SYSDATE
);

INSERT INTO SBSCOMPANY (AGE, SABEON)VALUES (34,'00000');
SELECT * FROM SBSCOMPANY;

-- 이름이랑 부서 컬럼을 추가한다.(둘 다 VARCHAR2)
ALTER TABLE SBSCOMPANY ADD NAME VARCHAR2(100);
ALTER TABLE SBSCOMPANY ADD BUSEO VARCHAR2(100);
-- BIRTHDAY 컬럼은 IPSAIL로 컬럼명을 바꾼다.
--ALTER TABLE mysoldier MODIFY GENDER VARCHAR2(3);
-- MODIFY : 타입 바꿀 때 쓴다.
-- 이름만 바꾸고 싶다면? RENAME COLUMN
ALTER TABLE SBSCOMPANY RENAME COLUMN BIRTHDAY TO IPSAIL;

--ORA-01439: 데이터 유형을 변경할 열은 비어 있어야 합니다
ALTER TABLE SBSCOMPANY MODIFY SABEON INT;
DELETE FROM SBSCOMPANY;

-- 사원 10명의 데이터를 추가한다.
-- IPSAIL 형식이 23/03/27인데 2023-03-27 이렇게 나오게 바꿔 보세요.
-- 도구->환경설정->NLS라고 검색 -> RR/MM/DD -> YYYY-MM-DD로 변경
SELECT * FROM SBSCOMPANY;

INSERT INTO SBSCOMPANY(SABEON,AGE,NAME,BUSEO) VALUES
(0,34,'소병수','임원');

-- 기존 데이터를 다른 곳으로 우선 옮기려고 한다.
-- 왜냐면 sbscompany를 싹 비우고, 컬럼을 변경할 예정이기 때문이다.
create table tempsbs as select * FROM SBSCOMPANY;
SELECT * FROM TEMPSBS;


-- 부서를 관리하는 테이블을 만들고 두 테이블을 연결한다.
CREATE TABLE BUSEOGWALI
(
CODE CHAR(5) PRIMARY KEY,
NAME VARCHAR2(100) NOT NULL
);
-- 임원,경영지원,개발부 이렇게 최소 3개 이상의 부서가 있어야 한다.
INSERT INTO BUSEOGWALI VALUES('00001', '임원');
INSERT INTO BUSEOGWALI VALUES('00002', '경영지원');
INSERT INTO BUSEOGWALI VALUES('00003', '개발부');

-- 앞서 추가한 사원들이 각각 여기에 속하게 해볼 것
DELETE FROM SBSCOMPANY;

-- 컬럼 삭제
ALTER TABLE SBSCOMPANY DROP COLUMN BUSEO;
-- 컬럼 추가
-- 참고할 컬럼과 이름은 달라도 되지만 타입과 BYTE크기는 모두 같아야 된다.
ALTER TABLE SBSCOMPANY ADD BUSEOCODE CHAR(5);
-- 외래키 추가
-- 주의!) BUSEOGWALI가 아니라 SBSCOMPANY에 FK를 추가하는 것
ALTER TABLE SBSCOMPANY ADD CONSTRAINT FK_BUSEO 
FOREIGN KEY(BUSEOCODE) REFERENCES BUSEOGWALI(CODE);

insert into sbscompany (sabeon, age, name, buseocode)
values (0,34,'소병수','00001');
insert into sbscompany (sabeon, age, name, buseocode)
values (1,35,'이동준','00002');
insert into sbscompany (sabeon, age, name, buseocode)
values (2,25,'임나현','00003');


select * from sbscompany;


-- 사번, 나이, 이름, 부서명이 나오게 출력해보세요.(join)
-- join
select sabeon, age, sbscompany.name, 
buseogwali.name from sbscompany join buseogwali 
on sbscompany.buseocode=buseogwali.code;
-- join을 이용하여 view를 만들어보세요.
create view mycompany as select sabeon 사번, age 나이, sbscompany.name 이름, 
buseogwali.name 부서명 from sbscompany join buseogwali 
on sbscompany.buseocode=buseogwali.code;

-- 뷰 : 가상 테이블
-- 원본에 영향을 받으며, 실제로 존재하는 테이블은 아님
-- select로 이루어진 결과물
-- 쿼리문이 너무 복잡하거나 길어질 경우 뷰를 사용하기도 한다.
select * from mycompany;

select * from buseogwali;

-- 각 부서에 사람을 각각 3명씩 더 추가하시오
insert into sbscompany (sabeon, age, name, buseocode)
values (6,23,'장대건','00001');
insert into sbscompany (sabeon, age, name, buseocode)
values (7,25,'정선호','00002');
insert into sbscompany (sabeon, age, name, buseocode)
values (8,25,'김희수','00003');

select * from mycompany;

--order by : 순서정렬
select * from mycompany order by 나이;
select * from mycompany order by 나이 desc;
-- 각 부서의 평균 나이를 출력하시오(group by)
--뷰를 사용
-- round : 소수점 처리 함수
select 부서명, round(avg(나이),1) from mycompany group by 부서명;
--뷰를 쓰지 않고 하는 방법
select buseocode, round(avg(age),1) 
from sbscompany group by buseocode;
-- 평균 나이가 35를 넘는 부서만 출력해보시오(having)
select 부서명, round(avg(나이),1) from mycompany group by 부서명 
having round(avg(나이),1)>35;




-----

CREATE TABLE MYDBSTUDENT
(
HAKBEON VARCHAR2(10) PRIMARY KEY,
NAME VARCHAR2(60),
AGE INT
);
CREATE TABLE MYDBHAKGWA
(
CODE CHAR(3) PRIMARY KEY,
NAME VARCHAR2(30)
);
-- 컬럼 추가
ALTER TABLE MYDBSTUDENT ADD HAKGWACODE CHAR(3);
-- 외래키 조건을 추가
ALTER TABLE MYDBSTUDENT ADD CONSTRAINT FK_CODE 
FOREIGN KEY(HAKGWACODE) REFERENCES MYDBHAKGWA(CODE);







-----

DROP TABLE MYDBSTUDENT;
DROP TABLE MYDBHAKGWA;

-- 학과 테이블을 먼저 만든다면
CREATE TABLE MYDBHAKGWA
(
CODE CHAR(3) PRIMARY KEY,
NAME VARCHAR2(30)
);
--테이블 생성하자마자 바로 외래키도 추가할 수 있음
CREATE TABLE MYDBSTUDENT
(
HAKBEON VARCHAR2(10) PRIMARY KEY,
NAME VARCHAR2(60),
AGE INT,
HAKGWACODE CHAR(3) REFERENCES MYDBHAKGWA(CODE)
);




---
INSERT INTO MYDBHAKGWA VALUES ('001','컴공');
INSERT INTO MYDBHAKGWA VALUES ('002','아동가족학');
INSERT INTO MYDBHAKGWA VALUES ('007','경호학과');

INSERT INTO MYDBSTUDENT VALUES('111', '정홍근',20,'001');
INSERT INTO MYDBSTUDENT VALUES('110', '박세진',21,'001');
INSERT INTO MYDBSTUDENT VALUES('211', '최은지',20,'002');
INSERT INTO MYDBSTUDENT VALUES('210', '서정빈',21,'002');
INSERT INTO MYDBSTUDENT VALUES('300', '김희수',31,'007');

SELECT * FROM MYDBHAKGWA;
SELECT * FROM MYDBSTUDENT;

SELECT HAKBEON,MYDBSTUDENT.NAME,MYDBHAKGWA.NAME 
FROM MYDBSTUDENT JOIN MYDBHAKGWA ON 
MYDBHAKGWA.CODE = MYDBSTUDENT.HAKGWACODE;





---------------

--학과 테이블
CREATE TABLE MYKBMAJOR
(
NAME VARCHAR2(30) NOT NULL,
CODE CHAR(3) PRIMARY KEY,
REGDATE TIMESTAMP DEFAULT SYSDATE
);

INSERT INTO MYKBMAJOR(NAME,CODE) VALUES
('컴공','001');
INSERT INTO MYKBMAJOR(NAME,CODE) VALUES
('화공','002');

SELECT * FROM MYKBMAJOR;
CREATE TABLE MYKBSTUDENT
(
    NAME VARCHAR2(30) NOT NULL,
    AGE CHAR(2),
    HAKBEON CHAR(10) PRIMARY KEY,
    HAKGWACODE REFERENCES MYKBMAJOR(CODE),
    REGDATE TIMESTAMP DEFAULT SYSDATE
);
INSERT INTO MYKBSTUDENT
(NAME,AGE,HAKBEON,HAKGWACODE)
VALUES ('이진곤','20','2023','001');
INSERT INTO MYKBSTUDENT
(NAME,AGE,HAKBEON,HAKGWACODE)
VALUES ('안교석','22','2021','002');
INSERT INTO MYKBSTUDENT
(NAME,AGE,HAKBEON,HAKGWACODE)
VALUES ('김신혁','21','2022','001');


SELECT * FROM MYKBSTUDENT;


--이름, 학번, 학과명 출력
SELECT MYKBSTUDENT.NAME, HAKBEON, MYKBMAJOR.NAME 
FROM MYKBSTUDENT JOIN MYKBMAJOR ON 
mykbstudent.hakgwacode = MYKBMAJOR.CODE;

--가독성 올리기
SELECT MYKBSTUDENT.NAME 이름, HAKBEON 학번, 
MYKBMAJOR.NAME 학과명 
FROM MYKBSTUDENT JOIN MYKBMAJOR ON 
mykbstudent.hakgwacode = MYKBMAJOR.CODE;



-- 특정과를 찾는 방법

--1. 그냥 학과코드를 이용한 검색
select * from mykbstudent where hakgwacode='001';

--2. 학과이름을 통해서 직접적으로 검색도 가능
--뷰 안 쓴 거
--저 괄호 안에 있는 게 하나의 뷰 즉 테이블이 된 것
select * from (SELECT MYKBSTUDENT.NAME 이름, HAKBEON 학번, 
MYKBMAJOR.NAME 학과명 
FROM MYKBSTUDENT JOIN MYKBMAJOR ON 
mykbstudent.hakgwacode = MYKBMAJOR.CODE) a where a.학과명='컴공';

--뷰 만들고 찾기
create view mykb as SELECT MYKBSTUDENT.NAME 이름, HAKBEON 학번, 
MYKBMAJOR.NAME 학과명 
FROM MYKBSTUDENT JOIN MYKBMAJOR ON 
mykbstudent.hakgwacode = MYKBMAJOR.CODE;

select * from mykb where 학과명='컴공';




create table book
(
bookid int primary key,
bookname varchar2(40) not null,
publisher varchar2(40) not null,
price int
);
create table customer
(
custid int primary key,
name varchar2(40) not null,
address varchar2(50),
phone varchar2(20) unique
);

create sequence myorder;
create table orders(
orderid int default myorder.nextval primary key,
custid int references customer(custid),
bookid int references book(bookid),
saleprice int,
orderdate date default sysdate
);

insert into book values(1,'축구의 역사', '굿스포츠', 7000);

insert into customer values(1,'박지성','영국 멘체스타', '000-5000-0001');

insert into orders (custid,bookid,saleprice,orderdate) values 
(1,1,7000,'2014-07-01');

select * from orders;



