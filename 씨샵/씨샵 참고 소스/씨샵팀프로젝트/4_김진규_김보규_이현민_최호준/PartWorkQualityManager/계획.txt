건질만한 데이터
info 안에서 date_created...

images 안에서...
file_name, date_captured

categories는 카테고리 테이블로 만들면 될 듯
새로운 카테고리가 생기면 insert query 날려주면 될 듯

attributes
work : 어느 공정인지
part : 도어 (부품)
quality : 불량 여부



테이블 3개 나옴
1. 제조 데이터 테이블
- file_name(pk)
- category_id(fk)
- date_created
- date_captured
- work : 어느 공정인지
- part : 도어 (부품)
- quality : 불량 여부

2. 이미지 파일 데이터
- file_name(pk)
- real_file_path여기로 경로 참조)

1. json들을 전부 읽어들인다.
2. jpg는 테이블에 filename을 키로 하고 
그 것의 경로를 키로 한다.(?)
얘네들도 싹 다 join하면 될 거 같은 데...?




2. 카테고리 테이블
"categories": [
        {
            "supercategory": "자동차부품품질",
            "id": 101,
            "name": "스크래치"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 102,
            "name": "외관 손상"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 201,
            "name": "고정 불량"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 202,
            "name": "고정핀 불량"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 203,
            "name": "단차"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 204,
            "name": "실링 불량"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 205,
            "name": "연계 불량"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 207,
            "name": "유격 불량"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 208,
            "name": "장착 불량"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 209,
            "name": "체결 불량"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 212,
            "name": "헤밍 불량"
        },
        {
            "supercategory": "자동차부품품질",
            "id": 213,
            "name": "홀 변형"
        }
    ]
	
	
	
데이터 추가/수정/삭제/조회

조회
어떻게 표기할지

부품별 분류
불량유형별 분류
불량별, 비불량별
work별 분류
날짜순(captured)
날짜순(created)

수정
pk는 file_name을 기준으로 함
불량 비불량 여부 수정
불량 유형 수정
파일 덮어쓰는 방식으로 하면 될 듯
이미지 수정하게 되면 captured부분 바꿔주기


삭제
이미지랑 같이 삭제해줘야 함


추가
=> insert만 생각할거라면 이건 그냥 신경꺼도 될 듯 하다.
어차피 이 프로그램은 추가수정삭제가 메인이 아니고 display 시키는 게 메인이다.
어쩌면 db가 필요없을 수도 있긴 하다...
이상한 서류때문에 이카고 있는거뿐이지...

이미지랑 데이터 생성일 동일하게 할 것
저 클래스대로 등록하고 이미지도 같이 등록해야 함
근데 나머지 내용들 어쩌지;;;
거의 대부분 고정이다.
bbox랑 segmentation 부분은 일단 공석으로 냅두자(항목만 냄겨두자)
bbox랑 segmentation을 해줘야 하나...
근데 segmentation을 해주게 되면 그걸 또 띄워야 하잖아.
polygon 라벨링 체크시 생성되게 함

================================

1. 데이터 동기화 (경로 선택해서 json에 있는 거 테이블로 이동)
2. 데이터 출력
- 차트와 datagridview를 같이 띄워주면 될 듯
- 항목별로 누를 때마다 다르게 나타나게 하기
- usercontrol이나 tab을 쓸 수도 있고... 그냥 안 쓸 수도 있다.
그냥 화면 하나에 다 할 수도 있음 
datagridview의 datasource 지우고 다시 그리고
차트도 마찬가지로 하면 될 듯 한 데...?

추가누르면 추가하는 화면 나오게 하기

datagridview에서 해당 데이터 검색
조회로 검색(single 등 사용)
그 데이터 검색하면 그 데이터에 대한 이미지랑 이런 것들이 쫙 뜬다.

수정/삭제




= 데이터 분석 및 시각화
50% 넘어가면 시급한 불량율
50% 경고
분석 결과 전체적으로 불량률이 높다


날짜별로 봤을 때 불량률이 이런 걸 알 수 있다.....
이런 정보를 뽑아내면 될 듯


================
데이터 등록시엔 insert문만 할 거고
켤 땐 select문만 실행할거다.

추가수정삭제시 insert한다

대신 display시에 select은 안 쓸거다.
쓰더라도 linq나 조건문 반복문을 활용할거다.
즉 한 번 list를 불러오면 그 list를 쓸거다.

고민이 되는 건

하나의 거대한 리스트로 모든 걸 처리하는 건 비효율적일 것 같다는 것이다.
데이터 개수가 상당하다.
이렇게 큰 데이터가 한 번에 다 필요한가...
차라리 리스트를 여러 개 해서 거기에 맞게끔 여러개의 작은 리스트로 쪼개서 받고
필요할 경우 얘들을 합치는 게 낫지 않나 싶기도 함...




화면 구성
프로그램 켤 때 db에서 읽어온다.

- display
 해당 gridview 누르면 상세 정보랑 이미지 같이 나오게 하기(이미지 없으면 안 띄우고)
 차트는 탭별로 나타내면 될 듯
 아니면 버튼 누를 때 마다 달라지게 하거나...
 어차피 원데이터는 다 있으니까
 그나저나 날짜순 이건 어떻게 짜르지... => date로 하면 그냥 날짜로 나옴
 date로 group by 하면 됨=> LINQ 얘기한 거임... sql문은 안 건드릴거다.
 
 
 경우에 따라선 usercontrol이나 panel 하여튼 화면을 여러 개 만들어놔야 할 수도 있겠다...
 
 
누적그래프 쓰면 될 듯
경우에 따라선 group by도 필요없을 듯

부품별 분류 category_id + attribute_quality
컬럼 - category_id들


불량유형별 분류 attribute_part + attribute_quality
컬럼 partlist



불량별, 비불량별 attribute_quality(전체 비율) + attribute_quality








work별 분류 attribute_work + attribute_quality
컬럼 partworklist







날짜순 date_created + attribute_quality
group by를 2개하거나...

날짜 세서 컬럼들 만들어내고
count 값 2개 가져옴(불량 비불량)



datagridview는 전체 띄우고
검색창으로 해당 조건인 걸 검색하게 하면 될 듯 함
그래서 해당 그리드 뷰 클릭 시 창 나타나게 하기

 

- 추가/수정/삭제 화면

- 데이터 가져오기(맨 아래로 빼면 될 듯)
label에 진행 중... 뜨게 하고
실시간으로 %도 뜨게 해주면 좋을 듯(thread 쓰면 되니까)
다 가져오면 db에 저장한다.
이걸 list들에도 넣는다.

이 기능은 이미 데이터가 있는 이후엔... 다른 경로에 새로 저장된 데이터를 갖고 올 때 활용하면 될 듯
+ json이 추가되거나 jpg가 추가 된 경우...

